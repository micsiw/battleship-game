(()=>{"use strict";const e=e=>({name:e,turn:!1,ships:["Destroyer","Destroyer","Submarine","Cruiser","Battleship","Carrier"]}),c=e=>{let c=e,o=!1;return{getHealth:()=>c,getSize:()=>e,hit:()=>{c-=1},isSunk:()=>(o=c<1,o)}},o={Carrier:c(5),Battleship:c(4),Cruiser:c(3),Submarine:c(3),Destroyer:c(2)},t=100,i=()=>{const e=[];return function(c){for(let o=0;o<c;o++){const c={occupied:null,visited:!1};e.push(c)}}(t),{board:e,placeShip:(c,i,l=function(){return Math.random()<.5}())=>{const r=o[c],d=r.getSize(),u=l,n=[0,10,20,30,40,50,60,70,80,90,100],s=[100,101,102,103,104,105,106,107,108,109];function a(){if(!0===u){for(let e=1;e<d;e++)if(n.includes(i+e))return!1;for(let c=0;c<d;c++)if(i+c>=0&&i+c<t&&null!==e[i+c].occupied)return!1}else if(!1===u){let c=0;for(let e=0;e<d;e++){if(s.includes(i+c))return!1;c+=10}c=0;for(let o=0;o<d;o++)if(i+c>=0&&i+c<t){if(null!==e[i+c].occupied)return!1;c+=10}}return!0}if(!0===u&&!0===a()){[i+d-10,i+d+10,i+d,i-11,i-1,i+9].forEach(((c,o)=>{c>=0&&c<100&&(o<3&&!n.includes(c)&&(e[c].occupied="blocked"),o>2&&!n.map((e=>e-1)).includes(c)&&(e[c].occupied="blocked"))}));for(let c=0;c<d;c++){const o=[i+c+10,i+c-10];e[i+c].occupied=r,o.forEach((c=>{c>=0&&c<100&&(e[c].occupied="blocked")}))}return!0}if(!1===u&&!0===a()){[i-9,i+10*d+1,i-11,i+10*d-1,i-10,i+10*d].forEach(((c,o)=>{c>=0&&c<100&&(o<2&&!n.includes(c)&&(e[c].occupied="blocked"),o>1&&o<4&&!n.map((e=>e-1)).includes(c)&&(e[c].occupied="blocked"),o>3&&(e[c].occupied="blocked"))}));let c=0;for(let o=0;o<d;o++){const o=[i+c+1,i+c-1];e[i+c].occupied=r,o.forEach(((c,o)=>{c>=0&&c<100&&(0!==o||n.includes(c)||(e[c].occupied="blocked"),1!==o||n.map((e=>e-1)).includes(c)||(e[c].occupied="blocked"))})),c+=10}return!0}return!1},receiveAttack:c=>{!0===e[c].visited?console.log("Field was already used"):null!==e[c].occupied&&"blocked"!==e[c].occupied?(console.log("Ship was striked"),e[c].occupied.hit(),e[c].visited=!0):e[c].visited=!0},areAllSunk:()=>{let c=!0;return e.forEach((e=>{null!==e.occupied&&"blocked"!==e.occupied&&!1===e.occupied.isSunk()&&(c=!1)})),c}}},l=e("Player"),r=e("Computer"),d=i(),u=i(),n=document.querySelector(".gameboards");function s(e,c){const o=e.ships,i=e.ships.length;for(let e=0;e<i;e++){const i=o.pop(),l=Math.floor(Math.random()*t);!1===c.placeShip(i,l)&&(o.push(i),e-=1)}}function a(){p(d,l),p(u,r),document.querySelector("[data-player='Computer'").childNodes.forEach((e=>{e.addEventListener("click",(()=>{var c;c=e.dataset.field,u.receiveAttack(c),n.innerHTML="",a(),console.log(e.dataset.field)}))}))}function p(e,c){const o=document.createElement("div");o.style.display="grid",o.style.gridTemplateColumns=`repeat(${Math.sqrt(t)}, 1fr)`,o.dataset.player=c.name,e.board.forEach(((e,c)=>{const t=document.createElement("div");t.classList.add("field"),t.dataset.field=c,null===e.occupied&&!0===e.visited||"blocked"===e.occupied&&!0===e.visited?t.style.backgroundColor="lightgray":null!==e.occupied&&!0===e.visited||"blocked"!==e.occupied&&!0===e.visited?t.style.backgroundColor="red":null!==e.occupied&&"blocked"!==e.occupied&&(t.style.backgroundColor="yellow"),o.appendChild(t)})),n.appendChild(o)}s(l,d),s(r,u),a()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,